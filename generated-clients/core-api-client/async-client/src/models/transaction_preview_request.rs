/*
 * Radix Core API
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionPreviewRequest {
    #[serde(rename = "at_ledger_state", skip_serializing_if = "Option::is_none")]
    pub at_ledger_state: Option<models::LedgerStateSelector>,
    /// An array of hex-encoded blob data, if referenced by the manifest.
    #[serde(rename = "blobs_hex", skip_serializing_if = "Option::is_none")]
    pub blobs_hex: Option<Vec<String>>,
    /// An integer between `0` and `10^10`, marking the epoch at which the transaction is no longer valid. If not provided, a maximum epoch (relative to the `start_epoch_inclusive`) will be used. 
    #[serde(rename = "end_epoch_exclusive", skip_serializing_if = "Option::is_none")]
    pub end_epoch_exclusive: Option<u64>,
    #[serde(rename = "flags", skip_serializing_if = "Option::is_none")]
    pub flags: Option<models::PreviewFlags>,
    /// A text representation of a transaction manifest.
    #[serde(rename = "manifest")]
    pub manifest: String,
    /// An optional transaction message. Only affects the costing.
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<models::TransactionMessage>,
    /// The logical name of the network
    #[serde(rename = "network")]
    pub network: String,
    /// An integer between `0` and `2^32 - 1`, chosen to allow a unique intent to be created (to enable submitting an otherwise identical/duplicate intent). If not provided, this defaults to 0. 
    #[serde(rename = "nonce", skip_serializing_if = "Option::is_none")]
    pub nonce: Option<u64>,
    /// Whether the notary should be used as a signer (optional). If not provided, this defaults to false. 
    #[serde(rename = "notary_is_signatory", skip_serializing_if = "Option::is_none")]
    pub notary_is_signatory: Option<bool>,
    /// The notary public key to use. If not provided, this defaults to a fixed public key. 
    #[serde(rename = "notary_public_key", skip_serializing_if = "Option::is_none")]
    pub notary_public_key: Option<models::PublicKey>,
    #[serde(rename = "options", skip_serializing_if = "Option::is_none")]
    pub options: Option<models::TransactionPreviewResponseOptions>,
    /// A list of public keys to be used as transaction signers. If not provided, this defaults to an empty array. 
    #[serde(rename = "signer_public_keys", skip_serializing_if = "Option::is_none")]
    pub signer_public_keys: Option<Vec<models::PublicKey>>,
    /// An integer between `0` and `10^10`, marking the epoch at which the transaction starts being valid. If not provided, the current epoch will be used (taking into account the `at_ledger_state`, if specified). 
    #[serde(rename = "start_epoch_inclusive", skip_serializing_if = "Option::is_none")]
    pub start_epoch_inclusive: Option<u64>,
    /// An integer between `0` and `65535`, giving the validator tip as a percentage amount. A value of `1` corresponds to a 1% fee. If not provided, this defaults to 0. 
    #[serde(rename = "tip_percentage", skip_serializing_if = "Option::is_none")]
    pub tip_percentage: Option<u32>,
}

impl TransactionPreviewRequest {
    pub fn new(manifest: String, network: String) -> TransactionPreviewRequest {
        TransactionPreviewRequest {
            at_ledger_state: None,
            blobs_hex: None,
            end_epoch_exclusive: None,
            flags: None,
            manifest,
            message: None,
            network,
            nonce: None,
            notary_is_signatory: None,
            notary_public_key: None,
            options: None,
            signer_public_keys: None,
            start_epoch_inclusive: None,
            tip_percentage: None,
        }
    }
}

